#!/usr/bin/env python

import os
import os.path
import glob
import stat
import subprocess

skip_list = ["test_ugawg_cube", "test_uniform_adapt_2d"]

class UnitTest:
    def __init__(self, exe):
        self.exe = os.curdir + os.sep + exe.split(os.sep)[-1]
        self.verbose = True
        self.dir = os.sep.join((os.curdir + os.sep + exe).split(os.sep)[:-1])
        self.cwd = os.getcwd()

    def log(self, msg):
        if self.verbose and msg != '':
            print("    %s: %s" % (self.exe.split('/')[-1], msg))

    def run(self):
        os.chdir(self.dir)

        args = [self.exe]

        if os.path.isfile(self.exe+".mpi"):
            file = open(self.exe+".mpi", "r")
            nprocs = file.readline().strip()
            file.close()
            args = ["mpiexec", "-n", nprocs] + args
       
        self.log("running")

        p = subprocess.Popen(args, shell=False, cwd=os.getcwd(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.stdout, self.stderr = p.communicate()

        if self.stderr:
            print(self.stderr)
        p.wait()
        exitStatus = p.returncode

        os.chdir(self.cwd)
        
        if exitStatus is None:
          return 0
        else:
          return exitStatus

    def parse(self):
        passcount = 0
        warncount = 0
        failcount = 0

        for line in self.stdout.split('\n'):
            line = line.lstrip()
            if "pass" in line: passcount = passcount + 1
            if "fail" in line: failcount = failcount + 1

        if not self.stdout:
            warncount = warncount + 1
        if self.stderr:
            warncount = warncount + 1

        if (warncount > 0 or failcount > 0):
            print(self.stdout)

        return (passcount, warncount, failcount)

class UnitTestTimer:
    def __init__(self, min):
        from multiprocessing import Process
        self.minutes = min
        self.waitsec = 7*60
        self.cp = Process(target=self.run)

    def run(self):
        import time
        for i in range(self.minutes):
            time.sleep(self.waitsec)
            print("Still running...")

    def start(self):
        self.cp.start()

    def terminate(self):
        self.cp.terminate()

class UnitTestHarness:
    def __init__(self, dir):
        self.tests = []
        if dir[-1] == '/': dir = dir + "*"
        else: dir = dir + "/*"

        files = glob.glob(dir)
        for file in files:
            if not os.path.isdir(file) and stat.S_IXUSR & os.stat(file)[stat.ST_MODE] and "test" in file:
                if file.split("/")[-1] not in skip_list:
                    self.tests.append(UnitTest(file))

    def run(self):
        passcount = 0
        warncount = 0
        failcount = 0

        warntests = []
        failtests = []

        for test in self.tests:

            UTTimer = UnitTestTimer(60)
            UTTimer.start()

            exitStatus = test.run()

            (P, W, F) = test.parse()

            if (W, F) == (0, 0) and P > 0:
              if P == 1:
                test.log("1 pass")
              else:
                test.log("%d passes" % P)

            if (P, W, F) == (0, 0, 0):
              print("    Warning: no output from test")
              warncount += 1
              warntests.append(test.exe)

            if W > 0:
              warntests.append(test.exe)

            if F > 0:
              failtests.append(test.exe)

            if not exitStatus == 0:
              print("    Failure: non-zero exit code from test")
              failcount += 1
              if not test.exe in failtests:
                failtests.append(test.exe)

            passcount += P
            warncount += W
            failcount += F

            UTTimer.terminate()

        print("  RESULTS")
        print("    Passes:   %d" % passcount)
        if len(warntests) == 0:
            print("    Warnings: %d" % warncount)
        else:
            print("    Warnings: %d; tests = %s" % (warncount, warntests))
        if len(failtests) == 0:
            print("    Failures: %d" % failcount)
        else:
            print("    Failures: %d; tests = %s" % (failcount, failtests))
        # Throw exception if any warning or failure occured, such that
        # the script can exit with error code, which is crucial for travis
        if (warncount > 0 or failcount > 0):
            raise Exception("Error: Encountered a warning or failure.")

if __name__ == "__main__":
    import sys

    if "--electricfence" in sys.argv:
        os.putenv("LD_PRELOAD", "/usr/lib/libefence.so.0.0")
        #os.putenv("EF_DISABLE_BANNER", "1")

    try:
        TestHarness = UnitTestHarness(sys.argv[-1])
        TestHarness.run()
    except:
        sys.exit(1)
